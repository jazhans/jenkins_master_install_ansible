---
# tasks file for roles/jenkins
- name: check to see if mkcert is installed
  stat:
    path: /usr/bin/mkcert
  register: mkcert_installed

- name: check to see if jenkins is installed
  stat:
    path: /var/lib/jenkins
  register: jenkins_installed

- name: check to see if nginx is installed
  stat:
    path: /etc/nginx
  register: nginx_installed

- name: Add Jenkins repo key
  apt_key:
    url: https://pkg.jenkins.io/debian/jenkins.io.key
    state: present
  when: jenkins_installed.stat.exists == False

- name: Install access to the Jenkins apt repository
  apt_repository:
    repo: deb http://pkg.jenkins.io/debian-stable binary/
    state: present
    filename: 'jenkins-stable'

- name: Install dependencies
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes

- name: Download Mkcert
  shell: wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.2/mkcert-v1.4.2-linux-amd64
  args: 
    chdir: "{{ home_dir }}"
  when: mkcert_installed.stat.exists == False

- name: Make mkcert executable
  file:
    path: "{{ home_dir }}/mkcert"
    owner: root
    group: root
    mode: 0755
  when: mkcert_installed.stat.exists == False

- name: Move Mkcert to bin
  shell: mv mkcert /usr/bin
  args: 
    chdir: "{{ home_dir }}"
  when: mkcert_installed.stat.exists == False

- name: Install Mkcert
  shell: mkcert -install
  args:
    chdir: "{{ home_dir }}"
  when: mkcert_installed.stat.exists == False

- name: Create Certs
  shell: mkcert localhost 127.0.0.1 ::1
  args:
    chdir: "{{ home_dir }}"
  when: mkcert_installed.stat.exists == False

- name: Create nginx config files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "u=rw,g=r,o=r"
  loop:
    - { src: roles/jenkins/templates/default_nginx.j2,            dest: /etc/nginx/sites-available/default }

- name: Enable UFW
  community.general.ufw:
    state: enabled

- name: UFW Rules 
  shell: ufw allow ssh && ufw allow https && ufw allow http
  args:
    chdir: "{{ home_dir }}"

- include: handlers/main.yml

- name: Wait for Jenkins to start up
  wait_for: timeout=35
  
- name: Get Jenkins password
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  changed_when: false
  register: result

- name: Password to "Unlock Jenkins"
  debug:
    var: result.stdout
